import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

/**
 * Write a description of class Jumper here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Jumper extends Actor
{
    private final int GRAVITY = 1;
    private final int STEP = 6;
    private int velocity;
    private boolean hx = false;
    private boolean start = false;
    private boolean lvl1 = false;
    private boolean lvl2 = false;
    private boolean lvl3 = false;
    private boolean lvl4 = false;
    private int[] coords = new int[2];
    public boolean didStart()
    {
        if (getWorld() instanceof Start) start = true;
        
        return start;
    }
    public boolean didLvl4()
    {
        if (getY() == 0 && getWorld() instanceof Level4) lvl4 = true;
        
        return lvl4;
    }
    public boolean didLvl3()
    {
        if (getY() == 0 && getWorld() instanceof Level3) lvl3 = true;
        
        return lvl3;
    }
    public boolean didLvl2()
    {
        if (getY() == 0 && getWorld() instanceof Level2) lvl2 = true;
        
        return lvl2;
    }
    public boolean didLvl1()
    {
        if (getY() == 0 && getWorld() instanceof Level1) lvl1 = true;
        
        return lvl1;
    }
    public Jumper()
    {
        velocity = 0;
    }
    public void act() 
    {
        fall();
        move();
        if (didStart() && Greenfoot.isKeyDown("space"))
        {
            //Starts Game
            Greenfoot.setWorld(new Level1());
            start = false;
        }
        if (didLvl1()) 
        {
            Greenfoot.setWorld(new Level2());
            System.out.println("Level 2");
            lvl1 = false;
        }
        if (didLvl2())
        {
            Greenfoot.setWorld(new Level3());
            System.out.println("Level 3");
            lvl2 = false;
        }
        if (didLvl3())
        {
            Greenfoot.setWorld(new Level4());
            System.out.println("Level 4");
            lvl3 = false;
        }
        if (didLvl4())
        {
            Greenfoot.setWorld(new Win());
            System.out.println("Win");
            lvl4 = false;
            Greenfoot.stop();
        }
        if (didFall())
        {
            Greenfoot.setWorld(new GameOver());
            Greenfoot.stop();
        }
        if (Greenfoot.isKeyDown("space") && isOnSolidGround()) jump();
        if (getX() < 20)setLocation(580, getY());
        if (getX() > 580)setLocation(20, getY());
        if (Greenfoot.isKeyDown("h") && hx == false)
        {
            hx = true;
        }
        else if (Greenfoot.isKeyDown("h") && hx == true)
        {
            hx = false;
        }
        if (Greenfoot.isKeyDown("up") && hx == true) setLocation(257, 335);
        
    }
    public void fall()
    {
        setLocation(getX(), getY() + velocity);
        if (isOnSolidGround()) 
        {
            velocity = 0;
            
            while (isOnSolidGround()) 
            {
                setLocation(getX(), getY() - 1);
            }
            setLocation(getX(), getY() + 1);
        }
        else if (velocity < 0 && didBumpHead()) {
            velocity = 0;
            
            while (didBumpHead()) {
                setLocation(getX(), getY() + 1);
            }
        }
        else velocity += GRAVITY;
    }
    public void jump()
    {
        velocity = -17;
    }
    public void move()
    {
        coords[0] = getY();
        coords[1] = getX();
        if (Greenfoot.isKeyDown("left") && canMoveLeft()) coords[1]-=STEP;
        if (Greenfoot.isKeyDown("right") && canMoveRight()) coords[1]+=STEP;
        setLocation(coords[1], coords[0]);
    }
    public boolean isOnSolidGround()
    {
        boolean isOnGround = false;
        
        if (getY() > getWorld().getHeight() - 50) isOnGround = true;
        
        int imageWidth = getImage().getWidth();
        int imageHeight = getImage().getHeight();
        if (getOneObjectAtOffset(imageWidth / -2, imageHeight / 2,
        Platform.class) != null || getOneObjectAtOffset(imageWidth
        / 2, imageHeight / 2, Platform.class) != null) isOnGround = true;
        
        return isOnGround;
    }
    public boolean didFall()
    {
        boolean fall = false;
        
        while (getY() > getWorld().getHeight() - 50) return true;
        
        return fall;
    }
    public boolean didBumpHead()
    {
        boolean bumpedHead = false;
        
        int imageWidth = getImage().getWidth();
        int imageHeight = getImage().getHeight();
        if (getOneObjectAtOffset(imageWidth / -2, imageHeight / -2,
        Platform.class) != null || getOneObjectAtOffset(imageWidth
        / 2, imageHeight / -2, Platform.class) != null) bumpedHead = true;
        
        return bumpedHead;
    }
    public boolean canMoveLeft() {
        boolean canMoveLeft = true;
        
        int imageWidth = getImage().getWidth();
        int imageHeight = getImage().getHeight();
        if (getOneObjectAtOffset(imageWidth / -2 - STEP, imageHeight / -2,
        Platform.class) != null || getOneObjectAtOffset(imageWidth
        / -2 - STEP, imageHeight / 2 - 1, Platform.class) != null) canMoveLeft = false;
        
        return canMoveLeft;
    }
    public boolean canMoveRight() {
        boolean canMoveRight = true;
        
        int imageWidth = getImage().getWidth();
        int imageHeight = getImage().getHeight();
        if (getOneObjectAtOffset(imageWidth / 2 + STEP, imageHeight / -2,
        Platform.class) != null || getOneObjectAtOffset(imageWidth
        / 2 + STEP, imageHeight / 2 - 1, Platform.class) != null) canMoveRight = false;
        
        return canMoveRight;
    }
}
